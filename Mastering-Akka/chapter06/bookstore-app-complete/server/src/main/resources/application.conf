bookstore {
  include "credit" 
  include "inventory"
  include "order"
  include "user"
  
  persistent-entity-timeout = "60s"
  persistent-entity-timeout = ${?PERSISTENT_ENTITY_TIMEOUT}

  akka {
    stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
    log-dead-letters-during-shutdown = on
    loglevel = info
    log-dead-letters = on
    log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

    extensions = ["com.packt.masteringakka.bookstore.common.CassandraProjectionStorage"]

    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    persistence {
      journal.plugin = "cassandra-journal"            
      snapshot-store.plugin = "cassandra-snapshot-store"
    }
            
    actor {
     debug {
        receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
        autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
        lifecycle = on // log all actor lifecycle events of all actors
        fsm = on // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
        event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
      }

      serializers {
        json = "com.packt.masteringakka.bookstore.common.JsonSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
      }

      serialization-bindings {
        "com.google.protobuf.Message" = proto
        "com.packt.masteringakka.bookstore.common.EntityFieldsObject" = json
      }      
    }
  }

  serviceBoots = ["Inventory", "Credit", "User", "Order"]
  
  elasticsearch {
    host = "elasticsearch"
    host = ${?ELASTICSEARCH_HOST}
    port = 9200
    port = ${?ELASTICSEARCH_PORT}
  }

  cassandra {
    host = "cassandra"
    host = ${?CASSANDRA_HOST}
    port = 9042
    port = ${?CASSANDRA_PORT}
    number-of-retries = 500

  }
  
  cassandra-journal {
    contact-points = [${bookstore.cassandra.host}]
    port = ${bookstore.cassandra.port}
    
    event-adapters {
      proto = "com.packt.masteringakka.bookstore.common.ProtobufDatamodelAdapter"
    }
    
    event-adapter-bindings {
      "com.packt.masteringakka.bookstore.common.EntityEvent" = proto
      "com.google.protobuf.Message" = proto
    }
  }

  cassandra-snapshot-store {
    contact-points = [${bookstore.cassandra.host}]
    port = ${bookstore.cassandra.port}
  }  

  cassandra-query-journal {
    refresh-interval = 500ms
    max-buffer-size = 100
    max-result-size-query = 100
  }
}
